# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ main ]

env:
  PER_IMAGE_TAG: testSpringBoot-v1-dev


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11.0.3
      uses: actions/setup-java@v1
      with:
        java-version: 11.0.3
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: get shortsha
      id: vars
      run: |
        echo ::set-output name=sha_short::$(git rev-parse --short=4 ${{ github.sha }})

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dev-cbdc
#        IMAGE_TAG: ${{ github.ref }}
        IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
#        PER_IMAGE_TAG: testSpringBoot-v1
      run: |
        echo "ready to build docker images"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$PER_IMAGE_TAG-$IMAGE_TAG -f ./docker/Dockerfile .
        echo "finished build "
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$PER_IMAGE_TAG-$IMAGE_TAG

    - name: replice image tags
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dev-cbdc
        IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
      run: |
        sed -i 's!ECR-IMAGE-TAG!'"$ECR_REGISTRY/$ECR_REPOSITORY:$PER_IMAGE_TAG-$IMAGE_TAG"'!g' ./testsb/values.yaml
        cat ./testsb/values.yaml

#    - name: helm install
#      uses: koslib/helm-eks-action@master
#      env:
#        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_TEST }}
#      with:
#        command: helm install testsb -f ./testsb
#
#    - name: helm update
#      uses: koslib/helm-eks-action@master
#      env:
#        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_TEST }}
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: dev-cbdc
#        IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
#      with:
#        command: helm upgrade --set imageTag=$ECR_REGISTRY/$ECR_REPOSITORY:$PER_IMAGE_TAG-$IMAGE_TAG testsb

      
